#include <ESP8266WiFi.h>
#include <espnow.h>

// Definições dos pinos do motor de passo 28BYJ-48
#define IN1 D1
#define IN2 D2
#define IN3 D3
#define IN4 D4

// Pino do botão
#define BUTTON_PIN D5

// Variáveis para controle do motor
const int stepsPerRevolution = 2048; // Número de passos para uma rotação completa
const int stepsPerSequence = 8;      // Número de passos na sequência
int motorSpeed = 2;                  // Ajuste o tempo de atraso conforme necessário

// Endereço MAC fixo para a ESP8266
uint8_t fixedMacAddress[] =  {0x5F, 0xCF, 0x7F, 0x13, 0xE2, 0x46};

// Endereço MAC da ESP32 (para receber comandos)
uint8_t broadcastAddress[] = {0xD4, 0x8F, 0xFF, 0x98, 0xCB, 0x9C}; // Substitua pelo endereço MAC da sua ESP32

// Estrutura para receber mensagens
typedef struct struct_message {
  char message[32];
} struct_message;

struct_message incomingData;

// Flags para indicar que comandos foram recebidos
volatile bool comandoLiberarRacao = false;
volatile bool comandoAtivarDescarga = false;

// Função de callback para recebimento de dados via ESP-NOW
void OnDataRecv(uint8_t *mac_addr, uint8_t *data, uint8_t len) {
  if (len == sizeof(struct_message)) {
    memcpy(&incomingData, data, sizeof(incomingData));
    Serial.print("Mensagem recebida via ESP-NOW: ");
    Serial.println(incomingData.message);

    // Verifica o comando recebido e define a flag correspondente
    if (strcmp(incomingData.message, "Liberar Racao") == 0) {
      comandoLiberarRacao = true;
    } else if (strcmp(incomingData.message, "Ativar Descarga") == 0) {
      comandoAtivarDescarga = true;
    }
  } else {
    Serial.println("Dados recebidos com tamanho incorreto");
  }
}

// Sequência para girar o motor de passo
void setStep(int a, int b, int c, int d) {
  digitalWrite(IN1, a);
  digitalWrite(IN2, b);
  digitalWrite(IN3, c);
  digitalWrite(IN4, d);
}

void rotateMotor360() {
  int iterations = stepsPerRevolution / stepsPerSequence; // 2048 / 8 = 256
  for (int i = 0; i < iterations; i++) {
    setStep(1, 0, 0, 1);
    delay(motorSpeed);
    setStep(1, 0, 0, 0);
    delay(motorSpeed);
    setStep(1, 1, 0, 0);
    delay(motorSpeed);
    setStep(0, 1, 0, 0);
    delay(motorSpeed);
    setStep(0, 1, 1, 0);
    delay(motorSpeed);
    setStep(0, 0, 1, 0);
    delay(motorSpeed);
    setStep(0, 0, 1, 1);
    delay(motorSpeed);
    setStep(0, 0, 0, 1);
    delay(motorSpeed);
  }
  // Desliga as bobinas do motor para economizar energia
  setStep(0, 0, 0, 0);
  Serial.println("Rotação do motor concluída");
}

void ativarDescarga() {
  // Implemente aqui a lógica para ativar a descarga
  Serial.println("Descarga ativada");
}

void setup() {
  Serial.begin(115200);

  // Configura os pinos do motor como saída
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);

  // Configura o pino do botão como entrada com pull-up interno
  pinMode(BUTTON_PIN, INPUT_PULLUP);

  // Inicializa o Wi-Fi em modo station
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  // Define o endereço MAC fixo
  wifi_set_macaddr(STATION_IF, fixedMacAddress);

  // Inicializa o ESP-NOW
  if (esp_now_init() != 0) {
    Serial.println("Erro ao inicializar ESP-NOW");
    return;
  }

  // Registra a função de callback para recebimento de dados
  esp_now_register_recv_cb(OnDataRecv);

  Serial.println("ESP8266 pronto para receber comandos");
}

void loop() {
  // Verifica se o comando para liberar ração foi recebido
  if (comandoLiberarRacao) {
    comandoLiberarRacao = false; // Reseta a flag
    Serial.println("Executando comando: Liberar Ração");
    rotateMotor360();
  }

  // Verifica se o comando para ativar descarga foi recebido
  if (comandoAtivarDescarga) {
    comandoAtivarDescarga = false; // Reseta a flag
    Serial.println("Executando comando: Ativar Descarga");
    ativarDescarga();
  }

  // Leitura do botão
  int reading = digitalRead(BUTTON_PIN);

  // Verifica se o botão foi pressionado
  if (reading == LOW) {
    // Debounce simples
    delay(50);
    if (digitalRead(BUTTON_PIN) == LOW) {
      Serial.println("Botão pressionado");
      rotateMotor360();
      // Aguarda o botão ser liberado
      while (digitalRead(BUTTON_PIN) == LOW) {
        delay(10);
      }
    }
  }
}
